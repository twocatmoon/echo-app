version: '3'
services:
  nginx:
    image: nginx:latest
    restart: unless-stopped
    container_name: ${PROJECT_NAME}_nginx
    ports:
      - 80:80
      - 443:443
    networks:
      - internal
    volumes:
      - ./backend/public:/app/backend/public
      - ./frontend/public:/app/frontend/public
      - ./conf/nginx/:/etc/nginx:ro
      - ./logs/nginx/:/var/log/nginx
      - /etc/localtime:/etc/localtime:ro
    depends_on:
      - frontend
      - backend

  frontend:
    container_name: ${PROJECT_NAME}_frontend
    build:
      context: .
      dockerfile: ./docker/frontend/${ENVIRONMENT}/Dockerfile
      args:
        - NODE_ENV=${ENVIRONMENT}
    restart: unless-stopped
    networks:
      - internal
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
      - ./logs/frontend:/root/.npm/_logs
    env_file:
      - ./.env

  backend:
    container_name: ${PROJECT_NAME}_backend
    build:
      context: .
      dockerfile: ./docker/backend/${ENVIRONMENT}/Dockerfile
      args:
        - NODE_ENV=${ENVIRONMENT}
    restart: unless-stopped
    env_file: .env
    environment:
      DATABASE_CLIENT: ${DATABASE_CLIENT}
      DATABASE_HOST: postgres
      DATABASE_NAME: ${DATABASE_NAME}
      DATABASE_USERNAME: ${DATABASE_USERNAME}
      DATABASE_PORT: ${DATABASE_PORT}
      STRAPI_APP_KEYS: ${STRAPI_APP_KEYS}
      STRAPI_API_TOKEN_SALT: ${STRAPI_API_TOKEN_SALT}
      STRAPI_ADMIN_STRAPI_JWT_SECRET: ${STRAPI_ADMIN_STRAPI_JWT_SECRET}
      STRAPI_TRANSFER_TOKEN_SALT: ${STRAPI_TRANSFER_TOKEN_SALT}
      STRAPI_JWT_SECRET: ${STRAPI_JWT_SECRET}
      STRAPI_CORS_ORIGINS: ${STRAPI_CORS_ORIGINS}
      STRAPI_UPLOAD_SIZE_LIMIT: ${STRAPI_UPLOAD_SIZE_LIMIT}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      NODE_ENV: ${ENVIRONMENT}
    volumes:
      - ./backend:/app
      - /app/node_modules
      - ./.env:/app/.env
    networks:
      - internal
    depends_on:
      - postgres

  postgres:
    image: postgres:16-alpine
    container_name: ${PROJECT_NAME}_postgres
    platform: linux/amd64
    restart: unless-stopped
    env_file: .env
    environment:
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
    volumes:
      - postgres-data:/var/lib/postgresql/data/
    networks:
      - internal

volumes:
  postgres-data:

networks:
  internal:
    name: ${PROJECT_NAME}_internal
    driver: bridge
